// <auto-generated />
using System;
using BookAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookAPI.Migrations
{
    [DbContext(typeof(RegistrationContext))]
    [Migration("20210406190948_first migration again")]
    partial class firstmigrationagain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("BookAPI.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("7c1a8aba-f471-4e8e-8eb6-2afdc1e5bf4a"),
                            Age = 65,
                            Country = "Unites States",
                            Name = "Bill Gates"
                        },
                        new
                        {
                            AuthorId = new Guid("f22c79bf-cd53-43d4-a6cf-53598edb8c74"),
                            Age = 48,
                            Country = "United Kingdom",
                            Name = "Matthew Walker"
                        },
                        new
                        {
                            AuthorId = new Guid("9ae2375a-748b-45a3-8bf0-b5d4a6ce9a69"),
                            Age = 51,
                            Country = "Unites States",
                            Name = "Hope Jahren"
                        },
                        new
                        {
                            AuthorId = new Guid("f652beb4-20d8-462c-b6d7-8b0d142712cf"),
                            Age = 45,
                            Country = "United Kingdom",
                            Name = "Matt Haig"
                        },
                        new
                        {
                            AuthorId = new Guid("313d7cce-3823-4cf9-b686-2a3dd50907e8"),
                            Age = 35,
                            Country = "United Kingdom",
                            Name = "Lucy Foley"
                        });
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookAPI.Models.BookGenre", b =>
                {
                    b.Property<Guid>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookGenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookGenreId = new Guid("17a62fcc-a445-4fc2-bc77-ecde4ee0ad20"),
                            Genre = "Fiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("2ae53231-c835-428f-adab-3215ab883379"),
                            Genre = "Mystery & Thriller"
                        },
                        new
                        {
                            BookGenreId = new Guid("d8c8060c-a3d9-4d9c-9d28-9e67b6d839ea"),
                            Genre = "Nonfiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("0a9dcfd0-9369-4b53-a67d-13f9899569df"),
                            Genre = "Science & Technology"
                        },
                        new
                        {
                            BookGenreId = new Guid("0161529c-8dc4-4ad5-9c44-aafeffd57c48"),
                            Genre = "Historical Fiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("b5f7dcf2-221c-4b06-9580-1cc4c8406b3d"),
                            Genre = "Science & Technology"
                        },
                        new
                        {
                            BookGenreId = new Guid("0454b66c-886b-481e-8f7e-3208b5bd6d01"),
                            Genre = "Fantasy"
                        },
                        new
                        {
                            BookGenreId = new Guid("24b47bb7-78b5-4b9e-804c-f345657d80f7"),
                            Genre = "Romance"
                        },
                        new
                        {
                            BookGenreId = new Guid("21dc7c93-0c1c-4f49-a9ca-16e4ee2cb465"),
                            Genre = "Horror"
                        });
                });

            modelBuilder.Entity("BookAPI.Models.BookSupplier", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BookSuppliers");
                });

            modelBuilder.Entity("BookAPI.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Name = "Standaard Boekhandel"
                        },
                        new
                        {
                            SupplierId = 2,
                            Name = "De Boekuil "
                        },
                        new
                        {
                            SupplierId = 3,
                            Name = "Athena "
                        });
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.HasOne("BookAPI.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookAPI.Models.BookSupplier", b =>
                {
                    b.HasOne("BookAPI.Models.Book", "Book")
                        .WithMany("BookSuppliers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Models.Supplier", "Supplier")
                        .WithMany("BookSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Navigation("BookSuppliers");
                });

            modelBuilder.Entity("BookAPI.Models.Supplier", b =>
                {
                    b.Navigation("BookSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
