// <auto-generated />
using System;
using BookAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookAPI.Migrations
{
    [DbContext(typeof(RegistrationContext))]
    partial class RegistrationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("BookAPI.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("d9d2abc9-c06c-4d51-a247-bce5a4128d7f"),
                            Age = 65,
                            Country = "Unites States",
                            Name = "Bill Gates"
                        },
                        new
                        {
                            AuthorId = new Guid("75805ed7-d5a1-40b8-b876-36c9e2b7ac5f"),
                            Age = 48,
                            Country = "United Kingdom",
                            Name = "Matthew Walker"
                        },
                        new
                        {
                            AuthorId = new Guid("2edb85ed-bc62-4d43-b17f-13bb77878ba0"),
                            Age = 51,
                            Country = "Unites States",
                            Name = "Hope Jahren"
                        },
                        new
                        {
                            AuthorId = new Guid("53b4bf5a-6c91-447c-82b2-c06efb5f1529"),
                            Age = 45,
                            Country = "United Kingdom",
                            Name = "Matt Haig"
                        },
                        new
                        {
                            AuthorId = new Guid("1d53f5a5-3092-4eda-86d6-91d501b8b3fe"),
                            Age = 35,
                            Country = "United Kingdom",
                            Name = "Lucy Foley"
                        });
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookAPI.Models.BookGenre", b =>
                {
                    b.Property<Guid>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookGenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookGenreId = new Guid("c44022d1-629a-4a64-b05a-9ca7cdadabf4"),
                            Genre = "Fiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("c0e2fd71-64f8-4480-a6e8-8349d50a99be"),
                            Genre = "Mystery & Thriller"
                        },
                        new
                        {
                            BookGenreId = new Guid("a21da655-a425-4837-a82f-392498240d8b"),
                            Genre = "Nonfiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("a94d7b38-f321-4d06-a174-c7b8cc0c3c71"),
                            Genre = "Science & Technology"
                        },
                        new
                        {
                            BookGenreId = new Guid("d3cc3e0b-6105-4c7c-aadd-ed68428aec12"),
                            Genre = "Historical Fiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("d4810793-ca51-4f90-b4df-39e0d5411fdc"),
                            Genre = "Science & Technology"
                        },
                        new
                        {
                            BookGenreId = new Guid("b50b2d94-5fa3-42e4-8689-287faae9b0c4"),
                            Genre = "Fantasy"
                        },
                        new
                        {
                            BookGenreId = new Guid("db55ddaa-c127-40b2-a6fc-9e4ef3825376"),
                            Genre = "Romance"
                        },
                        new
                        {
                            BookGenreId = new Guid("80c5eefe-47cc-4704-9e94-24c6cc1905cc"),
                            Genre = "Horror"
                        });
                });

            modelBuilder.Entity("BookAPI.Models.BookSupplier", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BookSuppliers");
                });

            modelBuilder.Entity("BookAPI.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Name = "Standaard Boekhandel"
                        },
                        new
                        {
                            SupplierId = 2,
                            Name = "De Boekuil "
                        },
                        new
                        {
                            SupplierId = 3,
                            Name = "Athena "
                        });
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.HasOne("BookAPI.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookAPI.Models.BookSupplier", b =>
                {
                    b.HasOne("BookAPI.Models.Book", "Book")
                        .WithMany("BookSuppliers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Models.Supplier", "Supplier")
                        .WithMany("BookSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Navigation("BookSuppliers");
                });

            modelBuilder.Entity("BookAPI.Models.Supplier", b =>
                {
                    b.Navigation("BookSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
