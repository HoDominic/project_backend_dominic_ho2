// <auto-generated />
using System;
using BookAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookAPI.Migrations
{
    [DbContext(typeof(RegistrationContext))]
    partial class RegistrationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("BookAPI.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("e99b0983-dd40-402b-839f-9a326e3c1b21"),
                            Age = 65,
                            Country = "Unites States",
                            Name = "Bill Gates"
                        },
                        new
                        {
                            AuthorId = new Guid("49ede919-829e-4727-8fa0-19515b2c579b"),
                            Age = 48,
                            Country = "United Kingdom",
                            Name = "Matthew Walker"
                        },
                        new
                        {
                            AuthorId = new Guid("8c3bdd93-2fa3-4504-a6aa-6cf1d68a9c33"),
                            Age = 51,
                            Country = "Unites States",
                            Name = "Hope Jahren"
                        },
                        new
                        {
                            AuthorId = new Guid("7b47c724-dcba-4fe4-91a7-a7ac93437403"),
                            Age = 45,
                            Country = "United Kingdom",
                            Name = "Matt Haig"
                        },
                        new
                        {
                            AuthorId = new Guid("f15e7a1f-adf9-4fa3-bf60-74f464f3d5c1"),
                            Age = 35,
                            Country = "United Kingdom",
                            Name = "Lucy Foley"
                        });
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookAPI.Models.BookGenre", b =>
                {
                    b.Property<Guid>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookGenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookGenreId = new Guid("b62b8b58-7f80-4c59-a43b-2b7d092eee22"),
                            Genre = "Fiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("4ccf13a4-f6ec-4f95-98f8-d52af5b2ba9e"),
                            Genre = "Mystery & Thriller"
                        },
                        new
                        {
                            BookGenreId = new Guid("ae873c67-0c8f-4bc2-b9fe-d4eb9bc5cb50"),
                            Genre = "Nonfiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("926b4dee-788a-4676-826b-c334a1803074"),
                            Genre = "Science & Technology"
                        },
                        new
                        {
                            BookGenreId = new Guid("a2f4be33-b1bb-4555-b27f-9f180e6e5fe4"),
                            Genre = "Historical Fiction"
                        },
                        new
                        {
                            BookGenreId = new Guid("dc31a872-3e29-4f25-8f7b-a876a92d20e8"),
                            Genre = "Science & Technology"
                        },
                        new
                        {
                            BookGenreId = new Guid("dd0c05d9-99ca-4e68-a5cb-a2eceb283095"),
                            Genre = "Fantasy"
                        },
                        new
                        {
                            BookGenreId = new Guid("6dfe9b50-5c96-4acd-91d7-171c8d657a79"),
                            Genre = "Romance"
                        },
                        new
                        {
                            BookGenreId = new Guid("a841826b-7375-41f0-9515-2f4ac8b7a7ab"),
                            Genre = "Horror"
                        });
                });

            modelBuilder.Entity("BookAPI.Models.BookSupplier", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BookSuppliers");
                });

            modelBuilder.Entity("BookAPI.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Name = "Standaard Boekhandel"
                        },
                        new
                        {
                            SupplierId = 2,
                            Name = "De Boekuil "
                        },
                        new
                        {
                            SupplierId = 3,
                            Name = "Athena "
                        });
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.HasOne("BookAPI.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookAPI.Models.BookSupplier", b =>
                {
                    b.HasOne("BookAPI.Models.Book", "Book")
                        .WithMany("BookSuppliers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Models.Supplier", "Supplier")
                        .WithMany("BookSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BookAPI.Models.Book", b =>
                {
                    b.Navigation("BookSuppliers");
                });

            modelBuilder.Entity("BookAPI.Models.Supplier", b =>
                {
                    b.Navigation("BookSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
